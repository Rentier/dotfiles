* User Interface tweaks
** Theme

I like to use gruvbox as my theme.

#+BEGIN_SRC emacs-lisp
;; Set theme
(use-package gruvbox-theme
  :ensure t
  :init
  (load-theme 'gruvbox t))
#+END_SRC

** Disable menu bar

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

** Maximize emacs on start

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

* Random quality of life things
** Character encoding

Use utf-8 (important for my windows machine).

#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
#+END_SRC

** Locale

System locale to use for formatting time values.

#+BEGIN_SRC emacs-lisp
(setq system-time-locale "C")
#+END_SRC

** ibuffer

Use ibuffer instead of list-buffers

#+BEGIN_SRC emacs-lisp
(defalias 'list-buffers 'ibuffer)
#+END_SRC

** y-or-n-p

Use y and n for yes and no

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Disable bell

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** Backups and autosave 

*** Backups

Disable backups and autosaves

#+BEGIN_SRC emacs-lisp
(setq make-backup-file nil)
#+END_SRC

*** Autosave

#+BEGIN_SRC emacs-lisp
(use-package real-auto-save
  :ensure t
  :init
  (setq real-auto-save-interval 60)
  :config
  (add-hook 'prog-mode-hook 'real-auto-save-mode)
)
#+END_SRC

*** Autorevert

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC
** Show column and line number

#+BEGIN_SRC emacs-lisp
(line-number-mode 1)
(column-number-mode 1)
#+END_SRC

** Clipboard
#+BEGIN_EXPORT emacs-lisp
(setq x-select-enable-clipboard t)
#+END_EXPORT
* org
** Initialization

Activate org-mode and add my notes to org-agenda.

#+BEGIN_SRC emacs-lisp
(use-package org
  :init
  (load-library "find-lisp")
  (setq org-agenda-files 
    (append
      (find-lisp-find-files "~/nhungnas/org" "\\.org$")))
  :bind
  (("C-c a" . org-agenda)))
#+END_SRC

** Configure keywords

I like to have more possible states for my TODOs than default.

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "STARTED(s)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c)")))
#+END_SRC

** Add indent

#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
(setq org-hide-leading-stars t)
(setq org-odd-level-only nil)
#+END_SRC

** org-capture

Set keycommand of 'org-capture to C-c c

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c c") 'org-capture)
(setq org-tag-alist `(
              ("sysadmin"   . ?s)
              ("home"       . ?h)
              ("INCEpTION"  . ?i)
              ("phd"        . ?p)
 ))
(setq org-default-notes-file "~/nhungnas/org/organizer.org")
(setq org-capture-templates '(
  (;; TODO
    "t"                ; key
    "Todo"             ; description
    entry              ; type
    (file+headline org-default-notes-file "Inbox")       ; target
    "* TODO %?%^g\n%U"
    :prepend t         ; properties
    :empty-lines 1     ; properties
    :created t         ; properties
  )  
))
#+END_SRC

** org-super-agenda
#+BEGIN_SRC emacs-lisp
(use-package org-super-agenda
  :ensure t
  :after org
  :config
  (org-super-agenda-mode 1)
  (setq org-super-agenda-groups '(
    (:name "Next items"
     :todo "NEXT"
     :time-grid t)
    (:name "Private"
     :order 7
     :tag ("chinese" "health" "private" "learn" "codes"))
    (:name "Backlog"
     :order 3
     :scheduled t)
    (:name "Waiting"
     :todo "WAITING" 
     :order 8)
    (:name "Someday"
     :todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
     :order 9)
    (:name "Deadlines"
     :deadline future
     :order 10)
)))
#+END_SRC
* ivy

** Counsel

It looks like counsel is a requirement for swiper.

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
)
#+END_SRC

** Swiper

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure try
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
))
#+END_SRC

* avy

Jump to things in Emacs tree-style.

#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char-2))
#+END_SRC

* Bibliography

I follow https://www.reddit.com/r/emacs/comments/4gudyw/help_me_with_my_orgmode_workflow_for_notetaking/d2l16uj for the note taking workflow.

** org-ref

#+BEGIN_SRC emacs-lisp
(use-package org-ref
  :after org
  :ensure t
  :init
  (setq 
      org-ref-notes-directory "~/nhungnas/org/references/notes"
      org-ref-bibliography-notes "~/nhungnas/org/references/articles.org"
      org-ref-default-bibliography "~/nhungnas/org/references/articles.bib"
      reftex-default-bibliography "~/nhungnas/org/references/articles.bib"
      org-ref-pdf-directory "~/nhungnas/org/references/pdfs/"
      org-ref-completion-library 'org-ref-ivy-cite)
  :bind
  (("C-c C-b n" . org-ref-open-bibtex-notes)))
#+END_SRC

** ivy-bibtex

ivy-bibtex allows me to search and manage my BibTeX bibliography. I also use it for taking notes.

#+BEGIN_SRC emacs-lisp
(use-package ivy-bibtex
  :ensure t
  :init
  ;; ivy-bibtex requires ivy's `ivy--regex-ignore-order` regex builder, which
  ;; ignores the order of regexp tokens when searching for matching candidates.
  (setq 
    ivy-re-builders-alist '((ivy-bibtex . ivy--regex-ignore-order) (t . ivy--regex-plus))
    ;; Set paths for bibliography and notes the same as in org-ref
    bibtex-completion-bibliography org-ref-default-bibliography
    bibtex-completion-library-path org-ref-pdf-directory
    bibtex-completion-notes-path org-ref-bibliography-notes
    ;; Set action menu
    ivy-bibtex-default-action 'ivy-bibtex-edit-notes
    bibtex-completion-additional-search-fields '(tags))
  :bind
  (("C-c C-b b" . ivy-bibtex)))
#+END_SRC

* Window management

** windmove

Move between windows by holding the shift key and with the arrows.

#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)
#+END_SRC

